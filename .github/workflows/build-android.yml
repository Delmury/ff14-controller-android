name: Build FF14 Controller APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('requirements_ff14_android.txt') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-venv \
          zip \
          unzip \
          openjdk-8-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython

    - name: Patch PyJNIus for Python 3.8+ compatibility
      run: |
        mkdir -p patches
        cat > patches/pyjnius_fix_long.patch << 'PATCH_EOF'
        --- a/jnius/jnius_utils.pxi
        +++ b/jnius/jnius_utils.pxi
        @@ -320,7 +320,7 @@
                     continue
         
                 if r == 'S' or r == 'I':
        -            if isinstance(arg, int) or (isinstance(arg, long) and arg < 2147483648):
        +            if isinstance(arg, int) and arg < 2147483648:
                         score += 10
                         continue
        PATCH_EOF
        echo "PyJNIus patch created successfully"

    - name: Accept Android SDK licenses
      run: |
        mkdir -p ~/.android
        echo 'count=0' > ~/.android/repositories.cfg
        echo y | buildozer android debug || echo "First run to setup SDK"
        
    - name: Accept all SDK licenses
      run: |
        find ~/.buildozer -name "sdkmanager" 2>/dev/null | head -1 | xargs -I {} bash -c 'yes | {} --licenses' || true
        
    - name: Build with Buildozer (with PyJNIus patch)
      run: |
        #!/bin/bash
        set -e
        
        echo "Starting Buildozer build..."
        buildozer android debug || {
          echo "First build failed, applying PyJNIus patch..."
          
          # Find PyJNIus source directory
          PYJNIUS_DIR=$(find ~/.buildozer -path "*/pyjnius-*" -name "jnius" -type d 2>/dev/null | head -1)
          if [ -n "$PYJNIUS_DIR" ]; then
            echo "Found PyJNIus at: $PYJNIUS_DIR"
            
            # Apply patch if the problematic line exists
            if grep -q "isinstance(arg, long)" "$PYJNIUS_DIR/jnius_utils.pxi" 2>/dev/null; then
              echo "Applying PyJNIus patch..."
              sed -i 's/isinstance(arg, int) or (isinstance(arg, long) and arg < 2147483648)/isinstance(arg, int) and arg < 2147483648/g' "$PYJNIUS_DIR/jnius_utils.pxi"
              echo "Patch applied successfully"
            else
              echo "PyJNIus patch not needed or already applied"
            fi
            
            # Retry build
            echo "Retrying build after patch..."
            buildozer android debug
          else
            echo "PyJNIus directory not found, re-running build..."
            buildozer android debug
          fi
        }

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: FF14Controller-APK
        path: bin/*.apk
        retention-days: 30

    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: FF14 Controller v1.0.${{ github.run_number }}
        body: |
          ## FF14 Controller para Android
          
          ### Instalación:
          1. Descarga el archivo APK
          2. Activa "Orígenes desconocidos" en tu tableta Android
          3. Instala el APK
          4. Ejecuta el servidor en tu PC
          5. ¡Disfruta jugando FF14!
          
          ### Controles incluidos:
          - Números 1-9, 0, -, =
          - Teclas F1-F12
          - Controles PS5 mapeados
          - Macros especiales para FF14
          
          ### Changelog:
          - Versión inicial con todas las funcionalidades
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
